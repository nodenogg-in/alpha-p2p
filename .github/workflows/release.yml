name: Deploy Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_ENV: production
  VITE_SYNC_SERVER_ENDPOINT: wss://websockets.nodenogg.in/sync
  ALLOWED_DOMAINS: https://agreeable-hill-0f4662303.4.azurestaticapps.net, https://gentle-tree-08c8e3a03.5.azurestaticapps.net, https://www.nodenogg.in

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build packages
        run: pnpm build

      - name: Run tests
        run: pnpm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: nodenoggin.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push versioned container images
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          # Build and tag images with version
          docker compose -f compose-azure.yml build
          
          # Tag with version
          docker tag nodenoggin.azurecr.io/nodenoggin-web-app:latest nodenoggin.azurecr.io/nodenoggin-web-app:$VERSION
          docker tag nodenoggin.azurecr.io/nodenoggin-yjs-sync-server:latest nodenoggin.azurecr.io/nodenoggin-yjs-sync-server:$VERSION
          docker tag nodenoggin.azurecr.io/nodenoggin-docs:latest nodenoggin.azurecr.io/nodenoggin-docs:$VERSION
          
          # Push both latest and versioned tags
          docker compose -f compose-azure.yml push
          docker push nodenoggin.azurecr.io/nodenoggin-web-app:$VERSION
          docker push nodenoggin.azurecr.io/nodenoggin-yjs-sync-server:$VERSION
          docker push nodenoggin.azurecr.io/nodenoggin-docs:$VERSION

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract Web App build files
        run: |
          VERSION=${{ steps.version.outputs.version }}
          docker create --name temp-web-app nodenoggin.azurecr.io/nodenoggin-web-app:$VERSION
          docker cp temp-web-app:/usr/share/nginx/html ./web-app-dist
          docker rm temp-web-app

      - name: Extract Docs build files
        run: |
          VERSION=${{ steps.version.outputs.version }}
          docker create --name temp-docs nodenoggin.azurecr.io/nodenoggin-docs:$VERSION
          docker cp temp-docs:/usr/share/nginx/html ./docs-dist
          docker rm temp-docs

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: websocketsnodenoggin
          images: nodenoggin.azurecr.io/nodenoggin-yjs-sync-server:${{ steps.version.outputs.version }}

      - name: Deploy Web App to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WEB }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "web-app-dist"
          skip_app_build: true

      - name: Deploy Docs to Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DOCS }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "docs-dist"
          skip_app_build: true